#!/bin/bash

set -Eeuo pipefail

start() {
  if pgrep -f "flask run --host 0.0.0.0 --port 9000" &> /dev/null; then
    echo "Error: index server is already running"
    exit 1
  elif pgrep -f "flask run --host 0.0.0.0 --port 9001" &> /dev/null; then
    echo "Error: index server is already running"
    exit 1
  elif pgrep -f "flask run --host 0.0.0.0 --port 9002" &> /dev/null; then
    echo "Error: index server is already running"
    exit 1
  else
    echo "starting index server ..."
    mkdir -p var/log
    rm -f var/log/index.log
    FLASK_APP=index INDEX_PATH="inverted_index_0.txt" flask run --host 0.0.0.0 --port 9000 >> var/log/index.log 2>&1 &
    FLASK_APP=index INDEX_PATH="inverted_index_1.txt" flask run --host 0.0.0.0 --port 9001 >> var/log/index.log 2>&1 &
    FLASK_APP=index INDEX_PATH="inverted_index_2.txt" flask run --host 0.0.0.0 --port 9002 >> var/log/index.log 2>&1 &
  fi
}

stop() {
  echo "stopping index server ..."
  pkill -f "flask run --host 0.0.0.0 --port 9000" || true
  pkill -f "flask run --host 0.0.0.0 --port 9001" || true
  pkill -f "flask run --host 0.0.0.0 --port 9002" || true
}

status() {
  set +o pipefail
  NPROCS=$(pgrep -f "flask run --host 0.0.0.0 --port 900[0-2]" | wc -l)
  set -o pipefail
  if [ "$NPROCS" -eq 3 ]; then
    echo "index server running"
    exit
  elif [ "$NPROCS" -eq 0 ]; then
    echo "index server stopped"
    exit 1
  else
    echo "index server error: found ${NPROCS} processes, expected 3"
    exit 2
  fi
}

if [ $# -ne 1 ]; then
  exit 1
fi

# Parse argument.  $1 is the first argument
case $1 in
  "start")
    start
    ;;

  "stop")
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    stop
    ;;

  "status")
    status
    ;;
    
  "restart")
    stop
    start
    ;;
esac
